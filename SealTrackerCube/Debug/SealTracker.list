
SealTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001188  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001314  08001314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001314  08001314  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001314  08001314  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001314  08001314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001314  08001314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001318  08001318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800131c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  08001328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08001328  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117c  00000000  00000000  00026a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  00027b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d8  00000000  00000000  000280f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee8e  00000000  00000000  000285d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006231  00000000  00000000  0004745e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd8ba  00000000  00000000  0004d68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010af49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001458  00000000  00000000  0010af9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080012fc 	.word	0x080012fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080012fc 	.word	0x080012fc

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f96f 	bl	80004b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 80001d8:	f000 f844 	bl	8000264 <MX_RTC_Init>
  MX_GPIO_Init();
 80001dc:	f000 f86a 	bl	80002b4 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2108      	movs	r1, #8
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <main+0x3c>)
 80001e6:	f000 fc4d 	bl	8000a84 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ee:	f000 f9d5 	bl	800059c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2108      	movs	r1, #8
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x3c>)
 80001f8:	f000 fc44 	bl	8000a84 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000200:	f000 f9cc 	bl	800059c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000204:	e7ec      	b.n	80001e0 <main+0x14>
 8000206:	bf00      	nop
 8000208:	48000400 	.word	0x48000400

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	; 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f866 	bl	80012ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]
  }
  */
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800022e:	2318      	movs	r3, #24
 8000230:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800023e:	2350      	movs	r3, #80	; 0x50
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
    Error_Handler();
  }
  */
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  */
}
 800025a:	bf00      	nop
 800025c:	3758      	adds	r7, #88	; 0x58
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_RTC_Init+0x48>)
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <MX_RTC_Init+0x4c>)
 800026c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_RTC_Init+0x48>)
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <MX_RTC_Init+0x48>)
 8000276:	227f      	movs	r2, #127	; 0x7f
 8000278:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_RTC_Init+0x48>)
 800027c:	22ff      	movs	r2, #255	; 0xff
 800027e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_RTC_Init+0x48>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_RTC_Init+0x48>)
 8000288:	2200      	movs	r2, #0
 800028a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <MX_RTC_Init+0x48>)
 800028e:	2200      	movs	r2, #0
 8000290:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_RTC_Init+0x48>)
 8000294:	2200      	movs	r2, #0
 8000296:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_RTC_Init+0x48>)
 800029a:	f000 fef1 	bl	8001080 <HAL_RTC_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80002a4:	f000 f846 	bl	8000334 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	40002800 	.word	0x40002800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_GPIO_Init+0x78>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <MX_GPIO_Init+0x78>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_GPIO_Init+0x78>)
 80002d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d8:	f003 0302 	and.w	r3, r3, #2
 80002dc:	603b      	str	r3, [r7, #0]
 80002de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2108      	movs	r1, #8
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <MX_GPIO_Init+0x7c>)
 80002e6:	f000 fbcd 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002ea:	2308      	movs	r3, #8
 80002ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4619      	mov	r1, r3
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_GPIO_Init+0x7c>)
 8000300:	f000 fa56 	bl	80007b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000304:	23c0      	movs	r3, #192	; 0xc0
 8000306:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000308:	2312      	movs	r3, #18
 800030a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000310:	2303      	movs	r3, #3
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000314:	2304      	movs	r3, #4
 8000316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_GPIO_Init+0x7c>)
 800031e:	f000 fa47 	bl	80007b0 <HAL_GPIO_Init>

}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	48000400 	.word	0x48000400

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6613      	str	r3, [r2, #96]	; 0x60
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	6593      	str	r3, [r2, #88]	; 0x58
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b098      	sub	sp, #96	; 0x60
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2254      	movs	r2, #84	; 0x54
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f000 ffa7 	bl	80012ec <memset>
  if(hrtc->Instance==RTC)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <HAL_RTC_MspInit+0x58>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d117      	bne.n	80003d8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80003ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	f107 030c 	add.w	r3, r7, #12
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fb7b 	bl	8000ab4 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80003c4:	f7ff ffb6 	bl	8000334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_RTC_MspInit+0x5c>)
 80003ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <HAL_RTC_MspInit+0x5c>)
 80003d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80003d8:	bf00      	nop
 80003da:	3760      	adds	r7, #96	; 0x60
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40002800 	.word	0x40002800
 80003e4:	40021000 	.word	0x40021000

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <NMI_Handler+0x4>

080003ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>

080003fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <BusFault_Handler+0x4>

08000400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <UsageFault_Handler+0x4>

08000406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f892 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <SystemInit+0x20>)
 8000442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <SystemInit+0x20>)
 8000448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800044c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000ed00 	.word	0xe000ed00

08000460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000498 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000464:	f7ff ffea 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800048e:	f000 ff09 	bl	80012a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000492:	f7ff fe9b 	bl	80001cc <main>

08000496 <LoopForever>:

LoopForever:
    b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004a4:	0800131c 	.word	0x0800131c
  ldr r2, =_sbss
 80004a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004ac:	20000050 	.word	0x20000050

080004b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_IRQHandler>

080004b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004b8:	2300      	movs	r3, #0
 80004ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f943 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c2:	200f      	movs	r0, #15
 80004c4:	f000 f80e 	bl	80004e4 <HAL_InitTick>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d002      	beq.n	80004d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	e001      	b.n	80004d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004d4:	f7ff ff34 	bl	8000340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_InitTick+0x6c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d023      	beq.n	8000540 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_InitTick+0x70>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_InitTick+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	fbb3 f3f1 	udiv	r3, r3, r1
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f941 	bl	8000796 <HAL_SYSTICK_Config>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10f      	bne.n	800053a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 f919 	bl	800075e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_InitTick+0x74>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]
 8000532:	e007      	b.n	8000544 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e004      	b.n	8000544 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e001      	b.n	8000544 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000540:	2301      	movs	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x24>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_IncTick+0x24>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008
 8000580:	2000004c 	.word	0x2000004c

08000584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_GetTick+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000004c 	.word	0x2000004c

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_Delay+0x44>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffde 	bl	8000584 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8f7      	bhi.n	80005c4 <HAL_Delay+0x28>
  {
  }
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008

080005e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <__NVIC_GetPriorityGrouping+0x18>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	f003 0307 	and.w	r3, r3, #7
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000714:	d301      	bcc.n	800071a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2301      	movs	r3, #1
 8000718:	e00f      	b.n	800073a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SysTick_Config+0x40>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000722:	210f      	movs	r1, #15
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f7ff ff8e 	bl	8000648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SysTick_Config+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Config+0x40>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff47 	bl	80005e4 <__NVIC_SetPriorityGrouping>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000770:	f7ff ff5c 	bl	800062c <__NVIC_GetPriorityGrouping>
 8000774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f7ff ff8e 	bl	800069c <NVIC_EncodePriority>
 8000780:	4602      	mov	r2, r0
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff5d 	bl	8000648 <__NVIC_SetPriority>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffb0 	bl	8000704 <SysTick_Config>
 80007a4:	4603      	mov	r3, r0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007be:	e148      	b.n	8000a52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2101      	movs	r1, #1
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 813a 	beq.w	8000a4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d005      	beq.n	80007f0 <HAL_GPIO_Init+0x40>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d130      	bne.n	8000852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2203      	movs	r2, #3
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4313      	orrs	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000826:	2201      	movs	r2, #1
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	091b      	lsrs	r3, r3, #4
 800083c:	f003 0201 	and.w	r2, r3, #1
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b03      	cmp	r3, #3
 800085c:	d017      	beq.n	800088e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	2b02      	cmp	r3, #2
 8000898:	d123      	bne.n	80008e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	08da      	lsrs	r2, r3, #3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	220f      	movs	r2, #15
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	08da      	lsrs	r2, r3, #3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3208      	adds	r2, #8
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0203 	and.w	r2, r3, #3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8094 	beq.w	8000a4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	4b52      	ldr	r3, [pc, #328]	; (8000a70 <HAL_GPIO_Init+0x2c0>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000928:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <HAL_GPIO_Init+0x2c0>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6613      	str	r3, [r2, #96]	; 0x60
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <HAL_GPIO_Init+0x2c0>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800093c:	4a4d      	ldr	r2, [pc, #308]	; (8000a74 <HAL_GPIO_Init+0x2c4>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000966:	d00d      	beq.n	8000984 <HAL_GPIO_Init+0x1d4>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <HAL_GPIO_Init+0x2c8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d007      	beq.n	8000980 <HAL_GPIO_Init+0x1d0>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a42      	ldr	r2, [pc, #264]	; (8000a7c <HAL_GPIO_Init+0x2cc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d101      	bne.n	800097c <HAL_GPIO_Init+0x1cc>
 8000978:	2302      	movs	r3, #2
 800097a:	e004      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 800097c:	2307      	movs	r3, #7
 800097e:	e002      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000984:	2300      	movs	r3, #0
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	f002 0203 	and.w	r2, r2, #3
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	4093      	lsls	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000996:	4937      	ldr	r1, [pc, #220]	; (8000a74 <HAL_GPIO_Init+0x2c4>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009a4:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a1c:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f47f aeaf 	bne.w	80007c0 <HAL_GPIO_Init+0x10>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	40010400 	.word	0x40010400

08000a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a94:	787b      	ldrb	r3, [r7, #1]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a9a:	887a      	ldrh	r2, [r7, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aa0:	e002      	b.n	8000aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8000abc:	2300      	movs	r3, #0
 8000abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d031      	beq.n	8000b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000ad8:	d01a      	beq.n	8000b10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8000ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000ade:	d814      	bhi.n	8000b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d009      	beq.n	8000af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8000ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ae8:	d10f      	bne.n	8000b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8000aea:	4bac      	ldr	r3, [pc, #688]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4aab      	ldr	r2, [pc, #684]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8000af6:	e00c      	b.n	8000b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3304      	adds	r3, #4
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f9cc 	bl	8000e9c <RCCEx_PLLSAI1_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8000b08:	e003      	b.n	8000b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8000b0e:	e000      	b.n	8000b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8000b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10b      	bne.n	8000b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000b18:	4ba0      	ldr	r3, [pc, #640]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b26:	499d      	ldr	r1, [pc, #628]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8000b2e:	e001      	b.n	8000b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8000b30:	7cfb      	ldrb	r3, [r7, #19]
 8000b32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 8099 	beq.w	8000c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000b46:	4b95      	ldr	r3, [pc, #596]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00d      	beq.n	8000b78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	4b8f      	ldr	r3, [pc, #572]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	4a8e      	ldr	r2, [pc, #568]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6593      	str	r3, [r2, #88]	; 0x58
 8000b68:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b74:	2301      	movs	r3, #1
 8000b76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b78:	4b89      	ldr	r3, [pc, #548]	; (8000da0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a88      	ldr	r2, [pc, #544]	; (8000da0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000b84:	f7ff fcfe 	bl	8000584 <HAL_GetTick>
 8000b88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8000b8a:	e009      	b.n	8000ba0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b8c:	f7ff fcfa 	bl	8000584 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d902      	bls.n	8000ba0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	74fb      	strb	r3, [r7, #19]
        break;
 8000b9e:	e005      	b.n	8000bac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8000ba0:	4b7f      	ldr	r3, [pc, #508]	; (8000da0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0ef      	beq.n	8000b8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8000bac:	7cfb      	ldrb	r3, [r7, #19]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d155      	bne.n	8000c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8000bb2:	4b7a      	ldr	r3, [pc, #488]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000bbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d01e      	beq.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d019      	beq.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8000bce:	4b73      	ldr	r3, [pc, #460]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8000bda:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000be0:	4a6e      	ldr	r2, [pc, #440]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bf0:	4a6a      	ldr	r2, [pc, #424]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8000bfa:	4a68      	ldr	r2, [pc, #416]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d016      	beq.n	8000c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fcba 	bl	8000584 <HAL_GetTick>
 8000c10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c12:	e00b      	b.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c14:	f7ff fcb6 	bl	8000584 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d902      	bls.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	74fb      	strb	r3, [r7, #19]
            break;
 8000c2a:	e006      	b.n	8000c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c2c:	4b5b      	ldr	r3, [pc, #364]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0ec      	beq.n	8000c14 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10b      	bne.n	8000c58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c40:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c4e:	4953      	ldr	r1, [pc, #332]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8000c56:	e004      	b.n	8000c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8000c58:	7cfb      	ldrb	r3, [r7, #19]
 8000c5a:	74bb      	strb	r3, [r7, #18]
 8000c5c:	e001      	b.n	8000c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c62:	7c7b      	ldrb	r3, [r7, #17]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d105      	bne.n	8000c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00a      	beq.n	8000c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	f023 0203 	bic.w	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	4943      	ldr	r1, [pc, #268]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00a      	beq.n	8000cb8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca8:	f023 020c 	bic.w	r2, r3, #12
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	493a      	ldr	r1, [pc, #232]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00a      	beq.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	4932      	ldr	r1, [pc, #200]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00a      	beq.n	8000cfc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	4929      	ldr	r1, [pc, #164]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00a      	beq.n	8000d40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	4918      	ldr	r1, [pc, #96]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00a      	beq.n	8000d62 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4910      	ldr	r1, [pc, #64]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d02c      	beq.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000d8c:	d10a      	bne.n	8000da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8000d8e:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a02      	ldr	r2, [pc, #8]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d98:	60d3      	str	r3, [r2, #12]
 8000d9a:	e015      	b.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f871 	bl	8000e9c <RCCEx_PLLSAI1_Config>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8000dbe:	7cfb      	ldrb	r3, [r7, #19]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d028      	beq.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	492d      	ldr	r1, [pc, #180]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dfe:	60d3      	str	r3, [r2, #12]
 8000e00:	e011      	b.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e0a:	d10c      	bne.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f842 	bl	8000e9c <RCCEx_PLLSAI1_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d01c      	beq.n	8000e6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e40:	4915      	ldr	r1, [pc, #84]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f81f 	bl	8000e9c <RCCEx_PLLSAI1_Config>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00a      	beq.n	8000e8e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4904      	ldr	r1, [pc, #16]	; (8000e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8000e8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000

08000e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d018      	beq.n	8000ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000eb6:	4b71      	ldr	r3, [pc, #452]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f003 0203 	and.w	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d10d      	bne.n	8000ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000ece:	4b6b      	ldr	r3, [pc, #428]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
       ||
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d047      	beq.n	8000f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e044      	b.n	8000f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d018      	beq.n	8000f22 <RCCEx_PLLSAI1_Config+0x86>
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d825      	bhi.n	8000f40 <RCCEx_PLLSAI1_Config+0xa4>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d002      	beq.n	8000efe <RCCEx_PLLSAI1_Config+0x62>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d009      	beq.n	8000f10 <RCCEx_PLLSAI1_Config+0x74>
 8000efc:	e020      	b.n	8000f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d11d      	bne.n	8000f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f0e:	e01a      	b.n	8000f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8000f10:	4b5a      	ldr	r3, [pc, #360]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d116      	bne.n	8000f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f20:	e013      	b.n	8000f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8000f22:	4b56      	ldr	r3, [pc, #344]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10f      	bne.n	8000f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8000f3e:	e006      	b.n	8000f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
      break;
 8000f44:	e004      	b.n	8000f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000f46:	bf00      	nop
 8000f48:	e002      	b.n	8000f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	4943      	ldr	r1, [pc, #268]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d17c      	bne.n	8001072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3f      	ldr	r2, [pc, #252]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000f7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f84:	f7ff fafe 	bl	8000584 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000f8a:	e009      	b.n	8000fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000f8c:	f7ff fafa 	bl	8000584 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d902      	bls.n	8000fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8000f9e:	e005      	b.n	8000fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ef      	bne.n	8000f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d15f      	bne.n	8001072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d110      	bne.n	8000fda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000fc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6892      	ldr	r2, [r2, #8]
 8000fc8:	0211      	lsls	r1, r2, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68d2      	ldr	r2, [r2, #12]
 8000fce:	06d2      	lsls	r2, r2, #27
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	492a      	ldr	r1, [pc, #168]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	610b      	str	r3, [r1, #16]
 8000fd8:	e027      	b.n	800102a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d112      	bne.n	8001006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8000fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6892      	ldr	r2, [r2, #8]
 8000ff0:	0211      	lsls	r1, r2, #8
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6912      	ldr	r2, [r2, #16]
 8000ff6:	0852      	lsrs	r2, r2, #1
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	0552      	lsls	r2, r2, #21
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	491f      	ldr	r1, [pc, #124]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001000:	4313      	orrs	r3, r2
 8001002:	610b      	str	r3, [r1, #16]
 8001004:	e011      	b.n	800102a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800100e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6892      	ldr	r2, [r2, #8]
 8001016:	0211      	lsls	r1, r2, #8
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6952      	ldr	r2, [r2, #20]
 800101c:	0852      	lsrs	r2, r2, #1
 800101e:	3a01      	subs	r2, #1
 8001020:	0652      	lsls	r2, r2, #25
 8001022:	430a      	orrs	r2, r1
 8001024:	4915      	ldr	r1, [pc, #84]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001026:	4313      	orrs	r3, r2
 8001028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001036:	f7ff faa5 	bl	8000584 <HAL_GetTick>
 800103a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800103c:	e009      	b.n	8001052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800103e:	f7ff faa1 	bl	8000584 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d902      	bls.n	8001052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	73fb      	strb	r3, [r7, #15]
          break;
 8001050:	e005      	b.n	800105e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0ef      	beq.n	800103e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d106      	bne.n	8001072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <RCCEx_PLLSAI1_Config+0x1e0>)
 800106e:	4313      	orrs	r3, r2
 8001070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d06c      	beq.n	800116c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f96e 	bl	8000388 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	; 0xca
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	; 0x53
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f87c 	bl	80011c2 <RTC_EnterInitMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d14b      	bne.n	800116c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80010e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010e6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68d2      	ldr	r2, [r2, #12]
 800110e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	041a      	lsls	r2, r3, #16
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f87f 	bl	8001228 <RTC_ExitInitMode>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11b      	bne.n	800116c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0203 	bic.w	r2, r2, #3
 8001142:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69da      	ldr	r2, [r3, #28]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800118c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800118e:	f7ff f9f9 	bl	8000584 <HAL_GetTick>
 8001192:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001194:	e009      	b.n	80011aa <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001196:	f7ff f9f5 	bl	8000584 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a4:	d901      	bls.n	80011aa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e007      	b.n	80011ba <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0ee      	beq.n	8001196 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d120      	bne.n	800121e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80011e6:	f7ff f9cd 	bl	8000584 <HAL_GetTick>
 80011ea:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80011ec:	e00d      	b.n	800120a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80011ee:	f7ff f9c9 	bl	8000584 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011fc:	d905      	bls.n	800120a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <RTC_EnterInitMode+0x5c>
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d1e7      	bne.n	80011ee <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <RTC_ExitInitMode+0x78>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <RTC_ExitInitMode+0x78>)
 800123a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800123e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <RTC_ExitInitMode+0x78>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10c      	bne.n	8001266 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff92 	bl	8001176 <HAL_RTC_WaitForSynchro>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01e      	beq.n	8001296 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e017      	b.n	8001296 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <RTC_ExitInitMode+0x78>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <RTC_ExitInitMode+0x78>)
 800126c:	f023 0320 	bic.w	r3, r3, #32
 8001270:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff7f 	bl	8001176 <HAL_RTC_WaitForSynchro>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <RTC_ExitInitMode+0x78>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <RTC_ExitInitMode+0x78>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6093      	str	r3, [r2, #8]
  }

  return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40002800 	.word	0x40002800

080012a4 <__libc_init_array>:
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	4d0d      	ldr	r5, [pc, #52]	; (80012dc <__libc_init_array+0x38>)
 80012a8:	4c0d      	ldr	r4, [pc, #52]	; (80012e0 <__libc_init_array+0x3c>)
 80012aa:	1b64      	subs	r4, r4, r5
 80012ac:	10a4      	asrs	r4, r4, #2
 80012ae:	2600      	movs	r6, #0
 80012b0:	42a6      	cmp	r6, r4
 80012b2:	d109      	bne.n	80012c8 <__libc_init_array+0x24>
 80012b4:	4d0b      	ldr	r5, [pc, #44]	; (80012e4 <__libc_init_array+0x40>)
 80012b6:	4c0c      	ldr	r4, [pc, #48]	; (80012e8 <__libc_init_array+0x44>)
 80012b8:	f000 f820 	bl	80012fc <_init>
 80012bc:	1b64      	subs	r4, r4, r5
 80012be:	10a4      	asrs	r4, r4, #2
 80012c0:	2600      	movs	r6, #0
 80012c2:	42a6      	cmp	r6, r4
 80012c4:	d105      	bne.n	80012d2 <__libc_init_array+0x2e>
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012cc:	4798      	blx	r3
 80012ce:	3601      	adds	r6, #1
 80012d0:	e7ee      	b.n	80012b0 <__libc_init_array+0xc>
 80012d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012d6:	4798      	blx	r3
 80012d8:	3601      	adds	r6, #1
 80012da:	e7f2      	b.n	80012c2 <__libc_init_array+0x1e>
 80012dc:	08001314 	.word	0x08001314
 80012e0:	08001314 	.word	0x08001314
 80012e4:	08001314 	.word	0x08001314
 80012e8:	08001318 	.word	0x08001318

080012ec <memset>:
 80012ec:	4402      	add	r2, r0
 80012ee:	4603      	mov	r3, r0
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d100      	bne.n	80012f6 <memset+0xa>
 80012f4:	4770      	bx	lr
 80012f6:	f803 1b01 	strb.w	r1, [r3], #1
 80012fa:	e7f9      	b.n	80012f0 <memset+0x4>

080012fc <_init>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	bf00      	nop
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr

08001308 <_fini>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr
